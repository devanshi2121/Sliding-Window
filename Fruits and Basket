Brute force - By Generating All the subarrays and using HashSet, T(c)=O(n*n) and S(c)=O(3)~O(1)
class Solution {
    public int totalFruit(int[] fruits) {
        int maxlen=0,n=fruits.length;
        for(int i=0;i<n;i++){
            HashSet<Integer> set=new HashSet<>();
            for(int j=i;j<n;j++){
                set.add(fruits[j]);
                if(set.size()<=2){
                   maxlen=Math.max(maxlen,j-i+1);
                }else{
                    break;
                }
            }
        }
        return maxlen;
    }
}

Better Approach - Using two Pointers and Hashmap, T(c) = O(n+n) ~ O(n) and S(c)=O(3)~O(1)
class Solution {
    public int totalFruit(int[] fruits) {
        int maxlen=0,n=fruits.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        int l=0,r=0;
        while(r<n){
            map.put(fruits[r],map.getOrDefault(fruits[r],0)+1);
            while(map.size()>2){
                map.put(fruits[l],map.get(fruits[l])-1);
                if(map.get(fruits[l])==0){
                    map.remove(fruits[l]);
                }
                l++;
            }
            maxlen=Math.max(maxlen,r-l+1);    
            r++;
        }
        return maxlen;
    }
}

Optimal Approach - T(c)=O(n) and S(c)=O(1)
 class Solution {
    public int totalFruit(int[] fruits) {
        int maxlen=0,n=fruits.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        int l=0,r=0;
        while(r<n){
            map.put(fruits[r],map.getOrDefault(fruits[r],0)+1);
            if(map.size()>2){
                map.put(fruits[l],map.get(fruits[l])-1);
                if(map.get(fruits[l])==0){
                    map.remove(fruits[l]);
                }
                l++;
            }
            maxlen=Math.max(maxlen,r-l+1);    
            r++;
        }
        return maxlen;
    }
}

