//Brute force - Generating All the subarrays , T(C)-O(n*n)
class Solution {
    public int longestOnes(int[] nums, int k) {
        int n=nums.length,maxlen=0;
        for(int i=0;i<n;i++){
            int zeros=0;
            for(int j=i;j<n;j++){
                if(nums[j]==0){
                    zeros++;
                }
                if(zeros<=k){
                    maxlen=Math.max(maxlen,j-i+1);
                }else{
                    break;
                }
            }
        }
        return maxlen;
    }
}

Better Approach - 
class Solution {
    public int longestOnes(int[] nums, int k) {
        int n=nums.length,maxlen=0;
        int l=0,r=0,zeros=0;
        while(r<n){
            if(nums[r]==0){
                zeros++;
            }
            while(zeros>k){
                if(nums[l]==0){
                    zeros--;
                }
                l++;
            }
            if(zeros<=k){
                maxlen=Math.max(maxlen,r-l+1);
            }
            r++;
        }
        return maxlen;
    }
}

Optimal Approach -
class Solution {
    public int longestOnes(int[] nums, int k) {
        int n=nums.length,maxlen=0;
        int l=0,r=0,zeros=0;
        while(r<n){
            if(nums[r]==0){
                zeros++;
            }
            if(zeros>k){
                if(nums[l]==0){
                    zeros--;
                }
                l++;
            }
            if(zeros<=k){
                maxlen=Math.max(maxlen,r-l+1);
            }
            r++;
        }
        return maxlen;
    }
}
